#! /usr/bin/env python

usage = """
pkz-running-avg [ OPTIONS ] COUNT FILE_1 FILE_2 ... FILE_N

Compute a sequence of running averages of pkz files.  COUNT should be
an integer which is the number of files to average over; the COUNT
argument should be followed by N filenames.  N must be greater than or
equal to COUNT.  One output file is generated for each subsequence of
COUNT consecutive files, starting with [FILE_1,...,FILE_COUNT], and
ending with [FILE_(N-COUNT+1),...,FILE_N].

Each output file is named the same as the last file in its input
sequence, but with a prefix of "running-avg-" added, unless the
--outfile-pattern=PATTERN argument is present, in which case PATTERN
is used to generate the output filenames.  PATTERN should be a printf
style format string, with a single %s conversion code; it will be
replaced with the name of the last file in the corresponding input
sequence, with any suffix (everything starting with the last period
and continuing to the end of the filename) removed.

The output files are written to the current directory, unless the --outdir=DIR
option is given, in which case they are written to the directory DIR.
"""

import pnt, pickle, gzip, os, re, math, optparse, sys
import numpy as np

parser = optparse.OptionParser(usage)

parser.add_option('--outdir',
                  help='directory in whicth to write output files',
                  dest='outdir', type="string", default=".")
parser.add_option('--outfile-pattern',
                  help='printf-style pattern for generating output filenames; must contain exactly one %s code',
                  dest='outfile_pattern', type="string", default="running-avg-%s")
parser.add_option('--quiet',
                  help='supress normal progress output',
                  dest='verbose', default=True, action='store_false')

(opts, args) = parser.parse_args()


if len(args) < 2:
    parser.print_help()
    sys.exit(0)

# COUNT is the number of files to include in each running avg
COUNT = int(args.pop(0))

FILES = args

# N is the total number of files given
N = len(FILES)

if N < COUNT:
    print "too few input files given"
    sys.exit(0)

if not os.path.exists(opts.outdir):
    print "output directory %s does not exist" % opts.outdir
    sys.exit(0)

if not re.search(r'%s', opts.outfile_pattern):
    print "outfile-pattern must contain exactly one %s code"
    sys.exit(0)
    
# The grids list holds the COUNT files to be averages
grids = []

# load the first COUNT-1 files
for file in FILES[0:COUNT-1]:
    if opts.verbose: print "loading %s" % file
    with gzip.open(file, "rb") as f:
        grids.append(pickle.load(f))

# for each remaining input file
for file in FILES[COUNT-1:]:
    # load it onto the end of the grids list
    if opts.verbose: print "loading %s" % file
    with gzip.open(file, "rb") as f:
        grids.append(pickle.load(f))
    # generate the average of the COUNT files now in the grids list
    if opts.verbose: print "averaging the last %1d files" % COUNT
    g = pnt.PntGrid.avg(grids)
    # write it to the output file
    outfile = os.path.join(opts.outdir,
                           os.path.basename(opts.outfile_pattern % re.sub(r'\.[^\.]*$', '', file)))
    if opts.verbose: print "writing %s" % outfile
    with gzip.open(outfile, "wb") as f:
        pickle.dump(g, f)
    # pop the first (leftmost) grid off the list, in preparation for loading
    # the next one
    grids.pop(0)
